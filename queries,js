//Find all books in a specific genre
db.books.find({genre: "Fiction"})

//Find books published after a certain year
db.books.find({published_year: { $gt: 2000 } })

//Find books by a specific author
db.books.find({author: "J.D Salinger"})

//Update the price of a specific book
db.books.updateOne(
    {title: "Brave New World"},
    { $set: { price: 14.99 } }
)

//Delete a book by its title
db.books.deleteOne({title: "The Hobbit"})

//Write a query to find books that are both in stock and published after 2010
db.books.find({in_stock: true, published_year: { $gt: 2010 }})

//Use projection to return only the title, author, and price fields in your queries
db.books.find({}, { title: 1, author: 1, price: 1, _id: 0 })

//Implement sorting to display books by price (both ascending and descending)
db.books.find().sort({price: 1})
db.books.find().sort({price: -1})

//Use the limit and skip methods to implement pagination (5 books per page)
db.books.find().limit(5)
db.books.find().skip(5).limit(5)

//Average price of books by genre
db.books.aggregate([
  { $group: { _id: "$genre", avgPrice: { $avg: "$price" } } }
])

//Author with most books
db.books.aggregate([
  { $group: { _id: "$author", bookCount: { $sum: 1 } } },
  { $sort: { bookCount: -1 } },
  { $limit: 1 }
])

//Group by publication decade
db.books.aggregate([
  { $project: { decade: { $subtract: [ { $divide: ["$published_year", 10] }, { $mod: [ { $divide: ["$published_year", 10] }, 1 ] } ] } } },
  { $group: { _id: "$decade", count: { $sum: 1 } } },
  { $sort: { _id: 1 } }
])

//Create an index on the title field for faster searches
db.books.createIndex({ title: 1 })

//Create a compound index on author + published_year
db.books.createIndex({ author: 1, published_year: -1 })

//Use explain() to check performance
db.books.find({ title: "The Lord of the Rings" }).explain("executionStats")

